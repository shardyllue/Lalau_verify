from typing import List

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from db.base import AppTable

from module.premium import appCall, bandCall, premiumCall


channel_text = """
<b>PremiumüèÜ –∫–∞–Ω–∞–ª</b> ‚Äî –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–æ–ø—É—Å–∫–æ–º –≤ –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã—Ö, –∫—Ä–∞—Å–∏–≤—ã—Ö, —è—Ä–∫–∏—Ö –¥–µ–≤—É—à–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç —Å–µ–±–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º—É–∂—á–∏–Ω—É.
–î–ª—è –¥–µ–≤—É—à–µ–∫ –≤—Ö–æ–¥ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –¥–µ–π—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞ –ø–æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.
–î–ª—è –º—É–∂—á–∏–Ω –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª –ø–ª–∞—Ç–Ω—ã–π, —Å—Ç–æ–∏–º–æ—Å—Ç—å 3000 —Ä—É–±–ª–µ–π.
"""

channel_btn_man = "–ú—É–∂—á–∏–Ω–∞"
channel_btn_womam = "–î–µ–≤—É—à–∫–∞"

channel_kb = InlineKeyboardMarkup().add(
    InlineKeyboardButton(
        text=channel_btn_man,
        callback_data=premiumCall.new(
            action=channel_btn_man
        )
    ),
    InlineKeyboardButton(
        text=channel_btn_womam,
        callback_data=premiumCall.new(
            action=channel_btn_womam
        )
    )
)

channel_link_admin = "t.me/Chesters_mill"
channel_link_womam_text = "–ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
channel_link_man_text = "–ù–∞–ø–∏—Å–∞—Ç—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
channel_response_woman = """
{ctx.from_user.first_name}, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ Premium –ö–∞–Ω–∞–ª –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!

<b>–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ Lalau</b>
"""


channel_response_man_1 = """
{ctx.from_user.first_name}, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ Premium –ö–∞–Ω–∞–ª –Ω–∞–¥–æ –æ–ø–ª–∞—Ç–∏—Ç—å –≤—Ö–æ–¥!
"""
channel_response_man_2 = """
<b>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>

<b>–¶–µ–Ω–∞</b>: <i>3000 —Ä—É–±</i>
<b>–¢–∏–ø —Ç–æ–≤–∞—Ä–∞:</b> <i>–î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –∫–∞–Ω–∞–ª—É</i>

<b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> <i>–æ–∫–æ–ª–æ 15 –º–∏–Ω—É—Ç</i>
"""

channel_response_man_3 = """
<b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.</b>
"""

payment_success = """
<b>–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É —É—Å–ª—É–≥–∏</b> <i>Premium –ö–∞–Ω–∞–ª</i>!
"""


band_text = """
–£–≤–∞–∂–∞–µ–º—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –ø—Ä–µ–º–∏—É–º-–∫–∞–Ω–∞–ª–∞ "lalau", –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –º—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏—â—É—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.
–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ "lalau" –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ç–∏–≤ —É—Å–ª—É–≥ –ø—Ä–æ—Å—Ç–∏—Ç—É—Ü–∏–∏, –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –≤—Å–µ–º—É, —á—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –£–≥–æ–ª–æ–≤–Ω—ã–º –∫–æ–¥–µ–∫—Å–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏.
"""

band_leader_icon = {0 : "ü•á", 1 : "ü•à", 2 : "ü•â"}

def band_kb(
    apps : List[AppTable],
    page : int = 0,
):
    _kb = InlineKeyboardMarkup()

    pages = apps.__len__() // 9
    start_with = 0 + 9*page
    finish_with = 9 + 9*page

    
    
    for index, app in enumerate(apps[start_with:finish_with]):
        if (index in range(0, 3)) and (page == 0):
            front = f"{band_leader_icon[index]}"
            back = ""
        else:
            front = ""
            back = f", –†–µ–π—Ç–∏–Ω–≥: {app.score}"

        _kb.add(
            InlineKeyboardButton(
                text=f"{front}{app.city}, {app.name}, {app.years} –ª–µ—Ç{back}", 
                callback_data=appCall.new(action="open", user_id=app.user_id, page=page)
            ),
        )
    

    return _kb.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è" if page > 0 else " ", 
            callback_data=bandCall.new(
                action="left", page=page
            ) if page > 0 else " "
        ),
        InlineKeyboardButton(
            text=f"{page + 1} / {pages + 1}", 
            callback_data="."
        ),
        InlineKeyboardButton(
            text="‚û°Ô∏è" if page < pages else " ", 
            callback_data=bandCall.new(
                action="right", page=page
            ) if page < pages else " "
        ),
    )

    
